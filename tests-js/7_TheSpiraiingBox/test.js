const { expect, config } = require("chai");
config.truncateThreshold=0;

describe("The 'spiraling' box",() => {

  function createBox(m, n) {
    var result = [];
    for (var i = 0; i < n / 2; i++) {
      result.push((new Array(m)).fill(i+1));
      for (let j = 0; j < i && j < m / 2; j++) {
        result[i][j] = j + 1;
        result[i][m - j - 1] = j + 1;
      }
    }
    for (let j = n & 1 ? i - 2 : i - 1; j >= 0; j--) {
      result.push(result[j]);
    }

    return result;
  }

  it('Create a box with specified dimensions', function () {
    expect(createBox(7, 8)).to.deep.equal([
      [1, 1, 1, 1, 1, 1, 1],
      [1, 2, 2, 2, 2, 2, 1],
      [1, 2, 3, 3, 3, 2, 1],
      [1, 2, 3, 4, 3, 2, 1],
      [1, 2, 3, 4, 3, 2, 1],
      [1, 2, 3, 3, 3, 2, 1],
      [1, 2, 2, 2, 2, 2, 1],
      [1, 1, 1, 1, 1, 1, 1]
    ]);

    expect(createBox(6, 4)).to.deep.equal([
      [1, 1, 1, 1, 1, 1],
      [1, 2, 2, 2, 2, 1],
      [1, 2, 2, 2, 2, 1],
      [1, 1, 1, 1, 1, 1]
    ]);

    expect(createBox(10, 9)).to.deep.equal([
      [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 2, 2, 2, 2, 2, 2, 2, 2, 1 ],
      [ 1, 2, 3, 3, 3, 3, 3, 3, 2, 1 ],
      [ 1, 2, 3, 4, 4, 4, 4, 3, 2, 1 ],
      [ 1, 2, 3, 4, 5, 5, 4, 3, 2, 1 ],
      [ 1, 2, 3, 4, 4, 4, 4, 3, 2, 1 ],
      [ 1, 2, 3, 3, 3, 3, 3, 3, 2, 1 ],
      [ 1, 2, 2, 2, 2, 2, 2, 2, 2, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
    ]);

    expect(createBox(12, 15)).to.deep.equal([
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ],
      [ 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1 ],
      [ 1, 2, 3, 4, 4, 4, 4, 4, 4, 3, 2, 1 ],
      [ 1, 2, 3, 4, 5, 5, 5, 5, 4, 3, 2, 1 ],
      [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ],
      [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ],
      [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ],

      [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ],
      [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ],
      [ 1, 2, 3, 4, 5, 5, 5, 5, 4, 3, 2, 1 ],
      [ 1, 2, 3, 4, 4, 4, 4, 4, 4, 3, 2, 1 ],
      [ 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1 ],
      [ 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
    ]);

  })
});
