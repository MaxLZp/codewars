var assert = require('assert');

describe('Kyu 7: Shaving the Beard', function () {

  function trim(x){
    return x.map((e, i) => {
      return i == x.length - 1
        ? e.map(el => '...')
        : e.map(el => el == '...' ? '...' : '|');
    });
  }

  it('solution1', function () {
    assert.deepEqual(trim([["J", '|'],["J", '|'],["...", '|']]), [["|", '|'],["|", '|'],["...", '...']]);
    assert.deepEqual(trim([["J", "|", "J"],["J", "|", "|"],["...", "|", "J"]]), [["|", "|", "|"],["|", "|", "|"],["...", "...", "..."]]);
    assert.deepEqual(trim([["J", "|", "J", "J"],["J", "|", "|", "J"],["...", "|", "J", "|"]]), [["|", "|", "|", "|"],["|", "|", "|", "|"],["...", "...", "...", "..."]]);
    assert.deepEqual(trim([["|","J","...","|","...","...","J","J","...","J","...","|","|","J"],["|","...","J","|","...","...","|","J","...","|","|","J","J","..."],["J","...","|","...","J","|","|","...","...","|","J","J","J","|"]]),
      [ [ '|', '|', '...', '|', '...', '...', '|', '|', '...', '|', '...', '|', '|', '|' ], [ '|', '...', '|', '|', '...', '...', '|', '|', '...', '|', '|', '|', '|', '...' ], [ '...', '...', '...', '...', '...', '...', '...', '...', '...', '...', '...', '...', '...', '...' ] ]);
  });

});
